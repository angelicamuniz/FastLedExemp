//* * * * * * * * * * * * * * * * * * * * *
//         Controle de Exoesqueleto       *
//* * * * * * * * * * * * * * * * * * * * *

/**
   @file Controle_exoesqueleto_v4.0.0.c
   @author Neurobots
   @date 13/03/2020
   @brief Este é o arquivo principal do controle da órtese
   @version 1.0.0

   @bug Ao carregar, o bluetooth continuará recebendo informações,
   então será possível enviar comandos que só serão executados caso a órtese
   seja ligada e em seguida retirado o carregador, ou seja, sem perda da alimentação.

   @bug Alterações no BRIGHTNESS alteram o tempo dos efeitos de fade em: mover(), p preparar, efeito de carregar a bateria.

   @todo Ajuste em caso de alteração do pack da bateria:
    Alterar a tensão mínima para efeito dos LEDs assim que liga a órtese, #define TENSAO_MINIMA = x
    Alterar função map que mapeia a tensão lida no carregamento para converter em efeito dos LEDs.
     Essa conversão leva em consideração o valor máximo que deve ser equivalente à bateria carregada.

   @todo Ajuste em caso de alteração do uC:
    A frequência do clock utilizada para cálculo da velocidade do motor. Atualmente é 16000000 = 16Mhz do ATmega328

   @todo Ajuste em relação à troca de motor:
    Corrigir TEMPO_MOVIMENTO de acordo com o tempo necessário para o motor realizar a abertura total da órtese

   @todo Ajuste em relação ao brilho quando a órtese estiver pronta:
    Talvez seja interessante diminuir o brilho dos LEDS enquanto a órtese carrega;
    O brilho do fade do movimento mover é limitado ~6 por conta da forma como foi implementado, de forma a ter variações sutis e agradável visualmente.

   \mainpage Descrição
   Realiza o controle do movimento de exoesqueleto composto de
   um motor DC com caixa de redução e encoder. Os comandos são recebidos
   por bluetooth, e consistem em: mover ('m', abre e fecha a mão), seguido
   do número 1 ou 2 correspondente ao bloco Pensar ou Mover e do valor do
   pwm com 3 dígitos, (exemplo 'm1200', bloco pensar, pwm de 200),
   bloco Preparar ('p'), parar os motores ('s') e informar a tensão da
   bateria ('v').

   \section library_sec Bibliotecas utilizadas neste projeto
   \subsection library1 FastLED
   Esta biblioteca controla os LEDs.
*/

/*
   Limitações:
   Ao carregar, o bluetooth continuará recebendo informações,
   então será possível enviar comandos que só serão executados caso a órtese
   seja ligada e em seguida retirado o carregador, ou seja, sem perda da alimentação.

   Ajuste em caso de alteração do pack da bateria:
    Alterar a tensão mínima para efeito dos LEDs assim que liga a órtese, #define TENSAO_MINIMA = x
    Alterar função map que mapeia a tensão lida no carregamento para converter em efeito dos LEDs.
     Essa conversão leva em consideração o valor máximo que deve ser equivalente à bateria carregada.

   Ajuste em caso de alteração do uC:
    A frequência do clock utilizada para cálculo da velocidade do motor. Atualmente é 16000000 = 16Mhz do ATmega328

   Ajuste em relação à troca de motor:
    Corrigir TEMPO_MOVIMENTO de acordo com o tempo necessário para o motor realizar a abertura total da órtese

   Ajuste em relação ao brilho quando a órtese estiver pronta:
    Talvez seja interessante diminuir o brilho dos LEDS enquanto a órtese carrega;
    O brilho do fade do movimento mover é limitado ~6 por conta da forma como foi implementado, de forma a ter variações sutis e agradável visualmente.
*/

/* Modificação 4.0.x:
   Modificações ...
*/


/**********************************************
   Definição dos Pinos
 **********************************************/
//Motor
#define VELOCIDADE_in         3   /**< Leitura da velocidade do motor*/
#define PWM_out               5   /**< Escrita da velocidade do motor.*/
#define DIRECAO               7   /**< Escrita da direção do motor.*/
#define HABILITA_MOTOR        10   /**< Habilitação do motor. Habilita em HIGH*/

//Leituras
#define CARREGADOR_CONECTADO  4     /**< Leitura se há carregador conectado.*/
#define STAT_CARREGADOR       9     /**< Leitura do estado de carregamento.*/
#define FIM_CURSO             2     /**< Leitura do sensor de fim de curso.*/
#define LEIT_PWR_IN           A2    /**< Leitura da tensão da bateria.*/
#define LEIT_CORRENTE         A0    /**< Leitura da corrente do motor.

O ganho do sensor de corrente utilizado é de 50 e seu resistor é de 120mOhm.

A tensão que o arduino recebe será = 50 * 0.120 * Im (Im é a corrente do motor).

O valor que recebemos da leitura do ADC é leitura = (50 * 0.120 * Im * 1024) / 5

A conversão para o valor real se dá por Im = (5 * leitura) / (50 * 0.120 * 1024)

Corrente limite escolhida: 750mA. Equivale à 4.5V após o ganho.
*/

/**********************************************
  Definição das constantes
**********************************************/
#define BAUD_RATE                 9600  /**< Velocidade da comunicação com o bluetooth.*/
#define TEMPO_MOVIMENTO           1300  /**< Duração do movimento.*/
#define TEMPO_AJUSTE              700   /**< Duração do movimento para abrir a órtese no comando 'a'.*/
#define TEMPO_AJUSTE_INICIAL      5000  /**< Duração do movimento para abrir a órtese assim que é ligada.*/
#define DELAY_LEIT_CORRENTE       50    /**< Delay para iniciar a leitura da corrente.*/
#define TENSAO_MINIMA             3.30  /**< Tensão mínima da bateria, abaixo dessa tensão um efeito nos LEDs é realizado ao ligar a órtese.*/
#define TENSAO_CARREGADA          4.10   /**< Tensão da bateria carregada.*/
#define TEMPO_FIM_CARGA           90    /**< Tempo em minutos para acionar LEDs verdes após detectar a TENSAO_CARREGADA da bateria carregada.*/
#define PWM_MAX                   255   /**< PWM máximo permitido para que o consumo seja inferior a 1.3A, consumo máximo calculado para o circuito do boost.*/
#define PWM_AJUSTE                050   /**< PWM para abrir a órtese no comando 'a'.*/
#define PWM_POSICAO               025   /**< PWM para encontrar posicao inicial, usado na função: posicao_dedos().*/
#define CORRENTE_MAXIMA           1500  /**< Valor máximo de corrente para iniciar a diminuição do PWM.*/
#define RESISTOR_SENSOR           0.047 /**< Valor do resistor do sensor de corrente.*/
#define GANHO_AMP                 50    /**< Ganho do amplificador do sensor de corrente.*/

/**********************************************
  Adição de bibliotecas, pinos e constantes
  relacionadas ao LED
**********************************************/
// (c) Michael Schoeffler 2017, http://www.mschoeffler.de
#define FASTLED_ALLOW_INTERRUPTS  0   /**< Comando para a biblioteca FastLED ativar as outras interrupções.*/
#include "FastLED.h"
#define LED_ALIM_PIN        A1        /**< Pino que controla a alimentação dos LEDs.*/
#define DATA_PIN            6         /**< Pino de dados da fita de LEDs.*/
#define LED_TYPE            WS2812B   /**< Tipo do LED.*/
#define COLOR_ORDER         GRB       /**< Ordem de cores do LED WS2812B.*/
#define NUM_LEDS            30        /**< Quantidade de LEDs.*/
#define BRIGHTNESS          15       /**< Brilho máximo.*/
#define DELAY_FADE_MOVER    10        /**< Delay no efeito do bloco Mover.*/
#define DURACAO_PREPARAR    4000      /**< Duração do Bloco Preparar.*/
#define LED_ALIM_ON         0         /**< Equivalente a LOW para ativar a alimentação dos LEDs.*/
#define LED_ALIM_OFF        255       /**< Equivalente a HIGH para desativar a alimentação dos LEDs.*/
int brightness_fade = BRIGHTNESS;     /**< Inicialização da variável do brilho dos LEDs.*/
char fade_direction = 0;              /**< Variável que controla o efeito de fade in ou out.*/
CRGB leds[NUM_LEDS];                  /**< Objeto criado para controlar os leds.*/
CRGB crgb_fundo           = CRGB::Green;
CRGB crgb_brilho          = CRGB::White;

/**********************************************
   Definição das variáveis
 **********************************************/
bool          debug = false;        /**< Armazena a função para debugar ou não.

                                    @note Se 'true' executa as instruções 'Serial.print***' para acompanhar processo pelo SerialMonitor.*/
boolean       sentido_movimento = 0;          /**< Controla o sentido do movimento do motor.*/
int           vel_mov;                        /**< Armazena o PWM para controle do motor.*/
unsigned long duracao_movimento;              /**< Armazena a duração do movimento, utilizada nas funções pensar e mover.*/
boolean       primeiro_loop = true;           /**< Apenas para verificar se é o primeiro loop do uC, de forma a decidir, caso a bateria esteja abaixo do nível mínimo, se mostra o efeito de bateria baixa nos LEDs.*/
bool          carregamento_completo = false;  /**< Indica o estado de carga da bateria.*/
bool          dedos_abertos;                  /**< Indica o estado dos dedos.*/
bool          dedos_fechados;                 /**< Indica o estado dos dedos.*/

//Variáveis utilizadas para a leitura do sinal do encoder que representa a velocidade do motor
//from https://www.electronicsblog.net/arduino-frequency-counterduty-cycle-meter/
int divider[6] = {
  0, 1, 8, 64, 256, 1024
};   /**< Armazena os prescales possíveis que auxilia na leitura da frequência de rotação do motor.*/
int prescaler = 5;      /**< Armazena a posição do vetor divider para escolha do prescale.*/
unsigned int count = 0;     /**< Armazena a medida do período total do sinal.*/
unsigned int middle = 0;    /**< Armazena a medida do período em alto do sinal.*/
int usage = 0;      /**< A partir dessa variável é que se decide diminuir o prescale.*/
char x = 0;       /**< Esta variável auxilia no controle da leitura da velocidade, alternando-se para definir se é para configurar a interrupção na subida ou na descida do sinal.*/

/*
   Variáveis para salvar os dados do movimento a serem enviados para o software
*/
#define QTD_MOVIMENTOS_MAX      51              /**< Quantidade de movimentos por bloco..*/
unsigned long media_velocidade = 0;           /**< Armazena, a cada iteração, a leitura da velocidade, e no final é calculada a sua média.*/
unsigned int  vetor_velocidade[QTD_MOVIMENTOS_MAX];   /**< Armazena a média da velocidade dos movimentos.*/
unsigned long idx_leit_velocidade = 0;          /**< Armazena a quantidade de médias de velocidade salvas no vetor vetor_velocidade[].*/

float corrente;                             /**< Salva o valor medido da corrente para teste de corrente máxima e para cálculo da média da corrente.*/
float media_corrente = 0;               /**< Armazena, a cada iteração, a leitura da corrente, e no final é calculada a sua média.*/
float vetor_corrente[QTD_MOVIMENTOS_MAX];       /**< Armazena a média da corrente dos movimentos.*/
int   idx_leit_corrente = 0;              /**< Armazena a quantidade de médias de corrente salvas no vetor vetor_corrente[].*/

// Motivo que o motou parou: 1 = fim de curso, 2 = atingiu tempo máximo, 3 = travou
unsigned int vetor_paradas[QTD_MOVIMENTOS_MAX];     /**< Armazena o motivo de parada de cada movimento.

                            @note Motivo que o motou parou: 1 = fim de curso, 2 = atingiu tempo máximo, 3 = travou.*/
unsigned int motivo_parada = 0;             /**< Armazena o motivo da parada do movimento.

                            @note Motivo que o motou parou: 1 = fim de curso, 2 = atingiu tempo máximo, 3 = travou.*/

// 1 = bloco pensar, 2 = bloco mover
unsigned int vetor_tipo_movimento[QTD_MOVIMENTOS_MAX];  /**< Armazena o tipo de cada movimento.

                            @note 1 = bloco pensar, 2 = bloco mover.*/
unsigned int tipo_movimento = 0;            /**< Armazena o tipo do movimento.

                            @note 1 = bloco pensar, 2 = bloco mover.*/
int idx_movimento = 0;                  /**< Armazena o índice do movimento atual.*/

/**********************************************
   Definição das funções
 **********************************************/

/**
   @brief Mensagem inicial.

   Função para envio de mensagem inicial
   <b>Neurobots - Controle de Exoesqueleto. Aguardando comandos...</b>
*/
void mensagem_inicial() {
  //Mensagem inicial a ser apresentada no começo do programa.
  Serial.println("Neurobots - Controle de Exoesqueleto");
  FastLED.delay(1000);
  Serial.print("Aguardando comandos");
  FastLED.delay(250);
  Serial.print(".");
  FastLED.delay(250);
  Serial.print(".");
  FastLED.delay(250);
  Serial.println(".");
  FastLED.delay(250);
}

/**
   @brief Função Mover Motor

   Geração do PWM no pino 11 a partir dos registradores.
*/
void mover_motor(int pwm_motor) {
  digitalWrite(HABILITA_MOTOR, HIGH);
  TCCR2A = _BV(COM2A0) | _BV(COM2A1) | _BV(WGM20);
  OCR2A = pwm_motor;
}

/**
   @brief Função Parar Movimento do Motor

   Finalização do PWM no pino 11 através dos registradores.
   Desabilita o motor.
*/
void parar_motor() {
  digitalWrite(HABILITA_MOTOR, LOW);
  TCCR2A = 0x00;
}

/**
   @brief Mensagem de Parâmetros.

   Função para envio de mensagem de parâmetros
   <b>Tempo de ação e Valor do PWM.</b>
*/
void mensagem_parametros() {
  //Mensagem dos parâmetros escolhidos para o movimento do exoesqueleto.
  //  Serial.println("Parâmetros: ");
  //  Serial.print("Tempo de acao: ");
  //  Serial.println(TEMPO_MOVIMENTO);
  Serial.print("Valor PWM: ");
  Serial.println(vel_mov);
}

/**
   @brief Movimento Pensar.

   Função responsável pelo movimento da órtese no <b>Bloco Pensar.</b>
   Esta função inclui <b>Controle da Corrente</b> do motor e o <b>Controle dos LEDs.</b>
*/
void pensar() {
  int pixel = 0;
  int delay_leds_pensar = TEMPO_MOVIMENTO / (NUM_LEDS / 2);
  int led_meio = NUM_LEDS / 2;
  unsigned long inicio_leit_corrente;
  unsigned long tempo_para_efeito = millis();

  FastLED.setBrightness(BRIGHTNESS);

  /*
     Envio do comando mover órtese
  */
  digitalWrite(DIRECAO, sentido_movimento);
  mover_motor(vel_mov);

  duracao_movimento = millis() + TEMPO_MOVIMENTO;
  inicio_leit_corrente = millis() + DELAY_LEIT_CORRENTE;

  while ( millis() < duracao_movimento ) {
    /*
       Tratamento da Corrente
       Leitura e conversao da corrente do motor
    */
    if (millis() > inicio_leit_corrente) {
      corrente = analogRead(LEIT_CORRENTE);
      corrente = 1000 * corrente * 5 / (GANHO_AMP * RESISTOR_SENSOR * 1024); //Multiplica por 1000 para ter valor em mA
      media_corrente += corrente;
      idx_leit_corrente++;
    }

    //Teste do nível da corrente
    if (corrente > CORRENTE_MAXIMA) {
      motivo_parada = 3;
      vel_mov -= 10;
      if (vel_mov < 1) {
        vel_mov = 0;
      }
      mover_motor(vel_mov);
    }

    /*
       Efeito dos LEDs: pensar.
    */
    if (millis() > tempo_para_efeito) {
      if (pixel < led_meio) {
        leds[led_meio + pixel] = crgb_fundo;
        leds[led_meio - pixel - 1] = crgb_fundo;
        if (pixel > 2) {
          leds[led_meio + pixel - 3] = CRGB::Black;
          leds[led_meio - pixel + 2] = CRGB::Black;
        }
        pixel++;
        FastLED.show();
        tempo_para_efeito = millis() + delay_leds_pensar;
      }
    }
  }

  if (motivo_parada == 1 || motivo_parada == 3) {
    for (int i = 0; i < NUM_LEDS; ++i) {
      leds[i] = CRGB::Black;
    }
    FastLED.show();
  }

  if ( motivo_parada == 0 ) {
    motivo_parada = 2;
    leds[1] = CRGB::Black;
    leds[38] = CRGB::Black;
    leds[0] = crgb_fundo;
    leds[39] = crgb_fundo;
    FastLED.show();
  }

  parar_motor();
}

/**
   @brief Movimento Mover.

   Função responsável pelo movimento da órtese no <b>Bloco Mover.</b>
   Esta função inclui <b>Controle da Corrente</b> do motor e o <b>Controle dos LEDs.</b>
*/
void mover() {
  /*
     Envio do comando mover órtese
  */
  int delay_leds_mover = TEMPO_MOVIMENTO / (2 * BRIGHTNESS);
  unsigned long inicio_leit_corrente;
  unsigned long tempo_para_efeito = millis();
  //Começa aceso, apaga, e depois acende novamente
  brightness_fade = BRIGHTNESS;
  fade_direction = 0;

  digitalWrite(DIRECAO, sentido_movimento);
  mover_motor(vel_mov);

  duracao_movimento = millis() + TEMPO_MOVIMENTO;
  inicio_leit_corrente = millis() + DELAY_LEIT_CORRENTE;

  while ( millis() < duracao_movimento ) {
    /*
       Tratamento da Corrente
       Leitura e conversao da corrente do motor
    */
    if (millis() > inicio_leit_corrente) {
      corrente = analogRead(LEIT_CORRENTE);
      corrente = 1000 * corrente * 5 / (GANHO_AMP * RESISTOR_SENSOR * 1024); //Multiplica por 1000 para ter valor em mA
      media_corrente += corrente;
      idx_leit_corrente++;
    }

    //Teste do nível da corrente
    if (corrente > CORRENTE_MAXIMA ) {
      motivo_parada = 3;
      vel_mov -= 10;
      if (vel_mov < 1) {
        vel_mov = 0;
      }
      mover_motor(vel_mov);
    }

    //Efeito de LEDs
    if (millis() > tempo_para_efeito) {
      if (fade_direction) {
        brightness_fade += 1;
        if (brightness_fade > BRIGHTNESS) {
          fade_direction = ~fade_direction;
        }
      }
      else {
        brightness_fade -= 1;
        if (brightness_fade < 0) {
          brightness_fade = 0;
          fade_direction = ~fade_direction;
        }
      }
      FastLED.setBrightness(brightness_fade);
      for (int i = 0; i < NUM_LEDS; ++i) {
        leds[i] = crgb_fundo;
      }
      FastLED.show();
      tempo_para_efeito = millis() + delay_leds_mover;
    }
  }

  while ((brightness_fade < BRIGHTNESS) && fade_direction) {
    brightness_fade += 1;
    if (brightness_fade > BRIGHTNESS) {
      fade_direction = ~fade_direction;
    }
    FastLED.setBrightness(brightness_fade);
    for (int i = 0; i < NUM_LEDS; ++i) {
      leds[i] = crgb_fundo;
    }
    FastLED.show();
  }

  if ( motivo_parada == 0 ) {
    motivo_parada = 2;
  }

  parar_motor();
}

/**
   @brief Fim de curso.

   Função chamada a partir da interrupção do pino de entrada do botão de Fim de Curso.
*/
void fim_de_curso() {
  //Quando a órtese atingir o limite do movimento, o motor deve parar.
  motivo_parada = 1;

  delayMicroseconds(15000);
  if (!digitalRead(FIM_CURSO)) {
    parar_motor();
  }
  //  parar_motor();
  delayMicroseconds(15000); //o maior valor que irá produzir um delay preciso é 16383. Em uma interrupção, delay() não pode ser utilizada.
}

/**
   @brief Ajuste do prescale.

   Função de ajuste do prescale para a leitura da frequência do sinal de velocidade do motor enviado a partir do encoder.
*/
ISR(TIMER1_OVF_vect) {

  if (prescaler < 4) {
    prescaler++;
  }
}

/**
   @brief Rotina de Interrupção Leitura da Velocidade.

   Rotina de Interrupção para leitura da velocidade
   a partir da largura do pulso do sinal enviado pelo encoder.
 **********************************************/
void interrupt()
{
  if (!x) {
    count = TCNT1;
    TCNT1 = 0x000;
    TCCR1B = prescaler;
    attachInterrupt(digitalPinToInterrupt(VELOCIDADE_in), interrupt, FALLING);
    media_velocidade += (16000000.0 / divider[prescaler] / count);
    idx_leit_velocidade++;

  }

  else {
    middle = TCNT1;
    attachInterrupt(digitalPinToInterrupt(VELOCIDADE_in), interrupt, RISING);

  }

  x = ~x;
}

/**
   @brief Registro de médias.

   Função para registro das médias
   da <b>velocidade e da corrente</b>.
*/
void registra_media() {
  if (idx_leit_corrente && idx_movimento < QTD_MOVIMENTOS_MAX) {

    media_velocidade /= idx_leit_velocidade;
    media_corrente /= idx_leit_corrente;

    vetor_velocidade[idx_movimento] = media_velocidade;
    vetor_corrente[idx_movimento] = media_corrente;

    vetor_paradas[idx_movimento] = motivo_parada;

    vetor_tipo_movimento[idx_movimento] = tipo_movimento;

    if (debug) {
      Serial.println("Referente ao movimento anterior:");
      Serial.print("Média da Velocidade: ");
      Serial.print(media_velocidade);
      Serial.println(" Hz");

      Serial.print("Média da corrente: ");
      Serial.print(media_corrente);
      Serial.println(" mA");

      //      Serial.print("*Quantidade de leituras da corrente: ");
      //      Serial.println(idx_leit_corrente);
      //      Serial.print("*Quantidade de leituras da velocidade: ");
      //      Serial.println(idx_leit_velocidade);
      Serial.print("*Quantidade de movimentos registrados: ");
      Serial.println(idx_movimento);

    }

    media_velocidade = 0;
    idx_leit_velocidade = 0;
    media_corrente = 0;
    idx_leit_corrente = 0;
    motivo_parada = 0;
    tipo_movimento = 0;
    idx_movimento++;
  }
}

/**
   @brief Envio das médias por bluetooth.

   Preparação dos vetores da Velocidade, Corrente,
   Tipo de Movimento e Tipo de Parada para envio de suas médias
   para o software.
*/
void envia_medias() {
  // Monta resposta ao sw
  // Exemplo
  // {acionamentos: [{velocidade: x, corrente: y, parada: 1, tipo: 1},
  //                 {velocidade: w, corrente: z, parada: 1, tipo: 1},...]}
  int tamanho = idx_movimento;

  Serial.print("{\"acionamentos\":[");
  String texto = "";
  int i;
  for (i = 0; i < tamanho; i++) {
    char data[100];
    if (i != tamanho - 1) {
      texto = texto + "{\"velocidade\":" + ("%d", vetor_velocidade[i])
              + ",\"corrente\":" + ("%.2f", vetor_corrente[i])
              + ",\"parada\":" + ("%d", vetor_paradas[i])
              + ",\"tipo\":" + ("%d", vetor_tipo_movimento[i]) + "},";
      Serial.print(texto);
      texto = "";
    } else {
      texto = texto + "{\"velocidade\":" + ("%d", vetor_velocidade[i])
              + ",\"corrente\":" + ("%.2f", vetor_corrente[i])
              + ",\"parada\":" + ("%d", vetor_paradas[i])
              + ",\"tipo\":" + ("%d", vetor_tipo_movimento[i]) + "}]}";
      Serial.print(texto);
    }
  }

  idx_movimento = 0;
  memset(vetor_velocidade, 0, tamanho * sizeof(vetor_velocidade[0]));
  memset(vetor_corrente, 0, tamanho * sizeof(vetor_corrente[0]));
  memset(vetor_paradas, 0, tamanho * sizeof(vetor_paradas[0]));
  memset(vetor_tipo_movimento, 0, tamanho * sizeof(vetor_tipo_movimento[0]));
}

/**
   @brief Aguarda caractere da serial.

   Função para aguardar a serial ao receber
   sucessivos caracteres depois de <b>'m'</b>.
*/
void aguarda_serial(unsigned long tempo_serial) {
  while (Serial.available() <= 0) {
    delayMicroseconds(1);
    if (millis() - tempo_serial > 1000) {
      break;   //para evitar um loop infinito
    }
  }
}

/**
   @brief Verifica posição dos dedos.

   A função verifica a posição dos dedos da órtese, se aberta ou fechada,
   para decisão do sentido do próximo movimento.
*/
void posicao_dedos() {
  if ( !(digitalRead(FIM_CURSO)) ) {
    digitalWrite(DIRECAO, 1);         // Fechar lentamente a órtese. Suficiente para livrar o fim de curso ou não forçar a engrenagem caso já esteja fechada.
    mover_motor(PWM_POSICAO);
    FastLED.delay(TEMPO_MOVIMENTO);
    parar_motor();

    if ( !(digitalRead(FIM_CURSO)) ) { // Caso continue com o fim de curso acionado, é sinal de que a órtese já está fechada.
      sentido_movimento = 1;          // Como antes de iniciar o movimento, o sentido é invertido, colocamos para 1 para que se inverta o movimento.
      dedos_abertos   = false;
      dedos_fechados  = true;
    }
    else {
      dedos_abertos   = true;
      dedos_fechados  = false;
    }
  }
  else {
    dedos_abertos   = false;
    dedos_fechados  = false;
  }
}


/**
   @brief Abre os dedos.

   A função envia o comando de abrir os dedos da órtese,
   em um tempo TEMPO_AJUSTE e um PWM_AJUSTE.
*/
void abrir_dedos() {
  //  if ( !(digitalRead(FIM_CURSO)) ){   // Se o fim de curso estiver ativado, os dedos estão abertos ou fechados.
  //    posicao_dedos();
  //    if (sentido_movimento) {          // Dedos fechados
  //      digitalWrite(DIRECAO, 0);       // Abre os dedos.
  //      mover_motor(PWM_AJUSTE);
  //      FastLED.delay(TEMPO_AJUSTE);
  //      parar_motor();
  //      sentido_movimento = 0;          // Como antes de iniciar o movimento, o sentido é invertido, colocamos para 0 para que se inverta o movimento e a órtese feche no próximo movimento.
  //    }
  //  }
  //  else {                              // Dedos no meio, pois o fim de curso não está ativado
  digitalWrite(DIRECAO, 0);         // Abre os dedos.
  mover_motor(PWM_AJUSTE);
  FastLED.delay(TEMPO_AJUSTE);
  parar_motor();
  sentido_movimento = 0;            // Como antes de iniciar o movimento, o sentido é invertido, colocamos para 0 para que se inverta o movimento e a órtese feche no próximo movimento.
  //  }
}


/**
   @brief Fecha os dedos.

   A função envia o comando de fechar os dedos da órtese,
   em um tempo TEMPO_AJUSTE e um PWM_AJUSTE.
*/
void fechar_dedos() {
  digitalWrite(DIRECAO, 1);         // Abre os dedos.
  mover_motor(PWM_AJUSTE);
  FastLED.delay(TEMPO_AJUSTE);
  parar_motor();
  sentido_movimento = 1;            // Como antes de iniciar o movimento, o sentido é invertido, colocamos para 1 para que se inverta o movimento e a órtese abra no próximo movimento.
}


/**
   @brief Limpa todos os LEDs.

   Função para apagar todos os LEDs.
   @param delayTime Delay após enviar dados para os LEDs.
*/
void showProgramCleanUp(long delayTime) {
  for (int i = 0; i < NUM_LEDS; ++i) {
    leds[i] = CRGB::Black;
  }
  FastLED.show();
  FastLED.delay(delayTime);
}


/**
  @brief Efeito Pixel caminhando pela fita de LEDs.

  Função de efeito: único pixel andando pela fita.
  @param crgb Cor do LED.
  @param delayTime Delay após enviar dados para os LEDs.
*/
void showProgramShiftSinglePixel(CRGB crgb, long delayTime) {
  for (int i = 0; i < NUM_LEDS; ++i) {
    leds[i] = crgb;
    FastLED.show();
    FastLED.delay(delayTime);
    leds[i] = CRGB::Black;
  }
}

/**
   @brief Efeito vários pixels caminhando pela fita de LEDs.

   Função de efeito: vários pixels caminhando pela fita de LEDs.
   @param delayTime Delay após enviar dados para os LEDs.
*/
void showProgramShiftMultiPixel(long delayTime) {
  for (int i = 0; i < NUM_LEDS; ++i) {
    for (int j = i; j > 0; --j) {
      leds[j] = leds[j - 1];
    }
    CRGB newPixel = CHSV(random8(), 255, 255);
    leds[0] = newPixel;
    FastLED.show();
    FastLED.delay(delayTime);
  }
}

/**
   @brief Efeito fade in.

   Função de efeito: Fade in, os LEDs vão do brilho mínimo para o máximo definido como BRIGHTNESS.
   @param crgb Cor do LED.
   @param delayTime Delay após enviar dados para os LEDs para aumentar novamente o brilho.
   @param incremento Incremento do brilho, utilizado para atingir o limite mais rápido, se desejável.
*/
void fade_in(CRGB crgb, long delayTime, int incremento) {
  int j = 0;
  for (brightness_fade = 0; brightness_fade < BRIGHTNESS ; j++) {
    for (int i = 0; i < NUM_LEDS; ++i) {
      brightness_fade = j * incremento;
      FastLED.setBrightness(brightness_fade);
      leds[i] = crgb;
      FastLED.show();
      FastLED.delay(delayTime);
    }
  }
}

/**
   @brief Efeito fade out.

   Função de efeito: Fade out, os LEDs vão do brilho máximo para o mínimo, máximo definido como BRIGHTNESS.
   @param crgb Cor do LED.
   @param delayTime Delay após enviar dados para os LEDs para aumentar novamente o brilho.
   @param incremento Incremento do brilho, utilizado para atingir o limite mais rápido, se desejável.
*/
void fade_out(CRGB crgb, long delayTime, int incremento) {
  int j = 0;
  for (brightness_fade = BRIGHTNESS; brightness_fade > 0 ; j++) {
    brightness_fade = BRIGHTNESS - incremento * j;
    if ((brightness_fade < incremento) && (brightness_fade > 0)) {
      brightness_fade = 2;
    }
    if (brightness_fade < 0) {
      brightness_fade = 0;
    }
    FastLED.setBrightness(brightness_fade);
    for (int i = 0; i < NUM_LEDS; ++i) {
      leds[i] = crgb;
    }
    FastLED.show();
    FastLED.delay(delayTime);
  }
}

/**
   @brief Efeito fade in out.

   Função de efeito: Fade in out, incrementa ou decrementa o brilho cada vez que é chamada.
   @param crgb Cor do LED.
   @param delayTime Delay após enviar dados para os LEDs para aumentar novamente o brilho.
*/
void fade(CRGB crgb, long delayTime) {

  FastLED.setBrightness(brightness_fade);

  for (int i = 0; i < NUM_LEDS; ++i) {
    leds[i] = crgb;
  }
  if (fade_direction) {
    brightness_fade += 1;
    if (brightness_fade > BRIGHTNESS) {
      fade_direction = ~fade_direction;
    }
  }
  else {
    brightness_fade -= 1;
    if (brightness_fade < 0) {
      brightness_fade = 0;
      fade_direction = ~fade_direction;
    }
  }
  FastLED.show();
  FastLED.delay(delayTime);
}

/**
   @brief Efeito fade in out sem delay.

   Função de efeito: Fade in out, incrementa ou decrementa o brilho cada vez que é chamada.
   @param crgb Cor do LED.
*/
void fade_sem_delay(CRGB crgb) {

  FastLED.setBrightness(brightness_fade);

  for (int i = 0; i < NUM_LEDS; ++i) {
    leds[i] = crgb;
  }
  if (fade_direction) {
    brightness_fade += 1;
    if (brightness_fade > BRIGHTNESS) {
      fade_direction = ~fade_direction;
    }
  }
  else {
    brightness_fade -= 1;
    if (brightness_fade < 0) {
      brightness_fade = 0;
      fade_direction = ~fade_direction;
    }
  }
  FastLED.show();
}

/**
   @brief Efeito fade escolha in ou out de acordo com parâmetro.

   Função de efeito: Fade in ou out.
   @param crgb Cor do LED.
   @param fade_direction fade inicial: fade_direction = 1 o fade vai de apagado para aceso; fade_direction = 0 o fade vai de aceso para apagado
   @param qtd_pisca Quantidade de piscar durante o tempo duracao_ms
   @param duracao_ms Duração do efeito em ms
   @param delayTime Delay após enviar dados para os LEDs para aumentar novamente o brilho.
*/
void fade_escolha(CRGB crgb, int fade_direction, int qtd_pisca, int duracao_ms) {
  if (fade_direction)
    brightness_fade = 0;
  else
    brightness_fade = BRIGHTNESS;
  int delay = (duracao_ms / (qtd_pisca * 2 * BRIGHTNESS)); //*0.65 é um fator de ajuste encontrado a partir de testes para BRIGHTNESS = 100
  for (int i = 0; i < qtd_pisca * BRIGHTNESS; i++) {
    fade(crgb, delay);
  }
}


/**
   @brief Efeito fade escolha in ou out de acordo com parâmetro sem delay.

   Função de efeito: Fade in ou out.
   @param crgb Cor do LED.
   @param fade_direction fade inicial: fade_direction = 1 o fade vai de apagado para aceso; fade_direction = 0 o fade vai de aceso para apagado
   @param qtd_pisca Quantidade de piscar durante o tempo duracao_ms
*/
void fade_escolha_sem_delay(CRGB crgb, int fade_direction, int qtd_pisca) {
  if (fade_direction)
    brightness_fade = 0;
  else
    brightness_fade = BRIGHTNESS;
  for (int i = 0; i < qtd_pisca * BRIGHTNESS; i++) {
    fade_sem_delay(crgb);
  }
}

/**
   @brief Efeito cor única.

   Função de efeito: Cor única em todos os LEDs.
   @param crgb Cor do LED.
   @param delayTime Delay após enviar dados para os LEDs para aumentar novamente o brilho.
*/
void color(CRGB crgb, long delayTime) {
  FastLED.setBrightness(BRIGHTNESS);
  for (int i = 0; i < NUM_LEDS; ++i) {
    leds[i] = crgb;
  }
  FastLED.show();
  FastLED.delay(delayTime);
}

/**
   @brief Efeito enquanto carrega.

   Função de efeito: Acende a quantidade de LEDs recebida como parâmetro a partir
   dos LEDs no centro da fita, para as bordas.
   @param numLedsToLight Quantidade de LEDs que devem ser acesos.
*/
void carregador_efeito(int numLedsToLight, bool carregamento_completo) {
  FastLED.setBrightness(BRIGHTNESS);
  if (carregamento_completo) {
    for (int led = 0; led < NUM_LEDS; led++) {
      leds[led] = CRGB::Green;
    }
  }
  else {
    int led_meio = NUM_LEDS / 2;
    for (int led = 0; led < numLedsToLight; led++) {
      leds[led_meio + led] = CRGB::Red;
      leds[led_meio - led - 1] = CRGB::Red;
    }
    for (int led = numLedsToLight; led < led_meio; led++) {
      leds[led_meio + led] = CRGB::Black;
      leds[led_meio - led - 1] = CRGB::Black;
    }
  }
  FastLED.show();
  FastLED.delay(10);
}


/**
   @brief Efeito inicial.

   Função de efeito: Acende os LEDs na cor recebida como parâmetro.
   @param numLedsToLight Quantidade de LEDs que devem ser acesos.
*/
void efeito_inicial(CRGB crgb_fundo, CRGB crgb_brilho) {
  int led_meio = NUM_LEDS / 2;
  for (int i = led_meio; i >= 0; i--)
    caminhar(crgb_fundo, 0, i, 10);
  caminhar_contrario_brilho(crgb_fundo, crgb_brilho, led_meio, 10);
}

/**
   @brief Efeito caminhar.

   Função de efeito: Acende os LEDs caminhando desde a posição inicial
   do meio da fita até as bordas
*/
void caminhar(CRGB crgb_fundo, int pos_inicial, int pos_final, int delay_efeito) {
  int pixel = pos_inicial;
  int led_meio = NUM_LEDS / 2;
  if (pos_final > led_meio)
    pos_final = led_meio;

  for (int i = 0; i < pos_final; i++) {
    if (pixel < pos_final) {
      leds[led_meio + pixel] = crgb_fundo;
      leds[led_meio - pixel - 1] = crgb_fundo;
      if (pixel > 0) {
        leds[led_meio + pixel - 1] = CRGB::Black;
        leds[led_meio - pixel] = CRGB::Black;
      }
      pixel++;
      FastLED.show();
      FastLED.delay(delay_efeito);
    }
  }
}
/**
   @brief Efeito caminhar o brilho.

   Função de efeito: Acende os LEDs caminhando desde a posição inicial
   do final da fita até o meio com um brilho.
*/
void caminhar_contrario_brilho(CRGB crgb_fundo, CRGB crgb_brilho, int pos_inicial, int delay_efeito) {
  int pixel = pos_inicial-1;
  int led_meio = NUM_LEDS / 2;

  for (int i = 0; i < pos_inicial; i++) {
    if (pixel >= 0) {
      leds[led_meio + pixel] = crgb_brilho;
      leds[led_meio - pixel - 1] = crgb_brilho;
      if (pixel < pos_inicial-1) {
        leds[led_meio + pixel + 1] = crgb_fundo;
        leds[led_meio - pixel - 2] = crgb_fundo;
      }
      pixel--;
      FastLED.show();
      FastLED.delay(delay_efeito);
      if (pixel < 0){
        leds[led_meio] = crgb_fundo;
        leds[led_meio - 1] = crgb_fundo;
      }
    }
  }
}

/**
   @brief Efeito ligado.

   Função de efeito: Acende os LEDs na cor recebida como parâmetro.
   @param numLedsToLight Quantidade de LEDs que devem ser acesos.
*/
void efeito_ligado(CRGB crgb) {
  color(crgb, 10);
}

/**
   @brief Função Setup

   Configurações iniciais do arduino.
*/
void setup() {
  // Definiçoes para os LEDs
  pinMode(LED_ALIM_PIN, OUTPUT);
  analogWrite(LED_ALIM_PIN, LED_ALIM_OFF);
  pinMode(DATA_PIN, OUTPUT);
  digitalWrite(DATA_PIN, LOW);
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip); // initializes LED strip
  FastLED.setBrightness(BRIGHTNESS);

  // Entradas - - - - - - - - - -
  pinMode(LEIT_CORRENTE, INPUT);
  pinMode(LEIT_PWR_IN, INPUT);
  pinMode(CARREGADOR_CONECTADO, INPUT);
  pinMode(STAT_CARREGADOR, INPUT);
  pinMode(FIM_CURSO, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(FIM_CURSO), fim_de_curso, FALLING);

  pinMode(VELOCIDADE_in, INPUT);
  //  digitalWrite(VELOCIDADE_in, HIGH); //resistor pull up
  TIMSK1 = 0x01; // enabled global and timer overflow interrupt;
  TCCR1A = 0x00; // normal operation page 148 (mode0);
  attachInterrupt(digitalPinToInterrupt(VELOCIDADE_in), interrupt, RISING);

  // Saídas  - - - - - - - - - - -
  // Motor
  pinMode(PWM_out, OUTPUT);
  pinMode(DIRECAO, OUTPUT);
  pinMode(HABILITA_MOTOR, OUTPUT);
  digitalWrite(HABILITA_MOTOR, LOW);
  // Geração do PWM
  pinMode(11, OUTPUT);
  TCCR2B = _BV(CS20);
  OCR2A = 50;
  OCR2B = 50;
  // Outros


  Serial.begin(BAUD_RATE);
  if (debug) {
    mensagem_inicial();
  }

  //Ativa alimentação dos LEDs
  analogWrite(LED_ALIM_PIN, LED_ALIM_ON);
  showProgramCleanUp(10);
}

/**
   @brief Função Loop

   Função principal do arduino.

   Em que processa os comandos recebidos via serial.
*/
void loop() {
  char    comando;                                // Leitura do comando do software
  float   volt_pwr;                               // Leitura da tensão da bateria

  /*
     Indicador de bateria descarregada
     Não haverá funções
     de efeito com a fita de leds.
  */
  volt_pwr = ((analogRead(LEIT_PWR_IN) * 2 * (5.00 / 1024.00)));

  /*
     Iniciar procedimento
  */
  if (!(digitalRead(CARREGADOR_CONECTADO))) {

    int volt_pwr_conv = 0;
    for (int i = 0; i < 50; i++) {
      volt_pwr += ((analogRead(LEIT_PWR_IN) * 2 * (5.00 / 1024.00)));
      volt_pwr_conv += analogRead(LEIT_PWR_IN);
    }
    volt_pwr /= 50;
    volt_pwr_conv /= 50;

    int numLedsToLight = map(2 * volt_pwr_conv, 614, 849, 2, NUM_LEDS / 2); //Limite inferior: (5/1024)*614 = 3V. Limite superior: (5/1024)*860 = 4,2V
    carregador_efeito(numLedsToLight, carregamento_completo);
    if (debug) {
      Serial.println(volt_pwr);
    }

    if (volt_pwr > TENSAO_CARREGADA) {
      delay(1000);
      for (int i = 0; i < 50; i++) {
        volt_pwr += ((analogRead(LEIT_PWR_IN) * 2 * (5.00 / 1024.00)));
      }
      volt_pwr /= 50;
      if (volt_pwr > TENSAO_CARREGADA) {
        carregamento_completo = true;
      }
    }

    if (carregamento_completo) {
      for (int i = 0; i < TEMPO_FIM_CARGA; i++) {
        delay(60000); //delay de 1 min, TEMPO_FIM_CARGA vezes.
      }
    }
    delay(1000);
  }
  else {
    if (primeiro_loop) {
      if (volt_pwr < TENSAO_MINIMA) {
        brightness_fade = 0;
        int qtd_pisca = 3;
        int delay_preparar = (DURACAO_PREPARAR / (qtd_pisca * 2 * BRIGHTNESS)) * 0.65; //0.65 é um fator de ajuste encontrado a partir de testes para BRIGHTNESS = 100
        for (int i = 0; i < qtd_pisca * 2 * BRIGHTNESS; i++) {
          fade(CRGB::Red, delay_preparar);
        }
      }
      showProgramCleanUp(10);
      efeito_inicial(crgb_fundo, crgb_brilho);   //Cor de fundo e cor do brilho
      
      //Verificando posição dos dedos e definindo sentido.
      posicao_dedos();
      if (!dedos_abertos) {
        digitalWrite(DIRECAO, 0);         // Abre os dedos.
        mover_motor(PWM_AJUSTE);
        FastLED.delay(TEMPO_AJUSTE_INICIAL);
        parar_motor();
      }

      sentido_movimento = 0;            // Como antes de iniciar o movimento, o sentido é invertido, colocamos para 0 para que se inverta o movimento e a órtese feche no próximo movimento.

      primeiro_loop = false;
    }

    efeito_ligado(crgb_fundo);

    if (Serial.available() > 0) {

      //Aguardando o recebimento de algum caractere pela comunicaçao serial.
      comando = Serial.read();

      /*
         Comando para mover a órtese. Deve vir na forma:
         1º dígito = m, indica instrução de mover movimento;
         2º dígito = 1 ou 2, indicando o tipo de movimento (bc pensar, bc mover);
         3º-5º dígitos = 000 a 255, indicando o valor pwm
      */
      if (comando == 'm') {

        //Salvando no vetor os dados do movimento anterior.
        //OBSERVAÇÃO: Deve vir antes de todos os outros comandos desse IF, para garantir a consistência da variável tipo_movimento.
        registra_media();

        unsigned long tempo_serial = millis();
        aguarda_serial(tempo_serial);
        char digito_tipo_movimento = Serial.read();
        tipo_movimento = digito_tipo_movimento - '0';  //converte char para inteiro

        char digitos_valor_pwm[3];
        aguarda_serial(tempo_serial);
        digitos_valor_pwm[0] = Serial.read();
        aguarda_serial(tempo_serial);
        digitos_valor_pwm[1] = Serial.read();
        aguarda_serial(tempo_serial);
        digitos_valor_pwm[2] = Serial.read();

        vel_mov = atoi(digitos_valor_pwm);  //converte para inteiro
        // caso o sw envie algo fora da faixa pwm admitida:
        if (vel_mov > PWM_MAX) {
          vel_mov = PWM_MAX;
        } else if (vel_mov < 0) {
          vel_mov = 0;
        }

        if (debug) {
          Serial.println("Movimento iniciado.");
          //          Serial.print("Digito tipo de movimento: ");
          //          Serial.println(digito_tipo_movimento);
          //          Serial.print("Digito valor pwm: ");
          //          Serial.println(digitos_valor_pwm);
          Serial.print("Tipo movimento recebido: ");
          Serial.println(tipo_movimento);
          Serial.print("Valor pwm recebido: ");
          Serial.println(vel_mov);
        }

        sentido_movimento = !sentido_movimento;

        if ( tipo_movimento == 1 ) {
          // fade_escolha ou fade_escolha_sem_delay depende do valor do BRIGHTNESS. Quanto maior, maior o delay do efeito, o que nos faz utilizar o fade_escolha_sem_delay
          fade_escolha(crgb_fundo, 0, 1,500);
          showProgramCleanUp(10);
          pensar();
          fade_escolha(crgb_fundo, 1, 1,500);
        } else if (tipo_movimento == 2) {
          mover();
        }

        parar_motor();


        if (motivo_parada == 1) {       // Se a órtese finalizou o movimento por fim de curso, está aberta ou fechada
          if (sentido_movimento) {      // 1 = fechar
            dedos_abertos   = false;
            dedos_fechados  = true;
          }
          else {                        // 0 = abrir
            dedos_abertos   = true;
            dedos_fechados  = false;
          }
        }
        else {
          dedos_abertos   = false;
          dedos_fechados  = false;
        }

        if (debug) {
          Serial.print("PWM final: ");
          Serial.println(vel_mov);
          Serial.println("Movimento finalizado.");
          Serial.println("_______________________");
        }
      }
      /*
         Comando para parar a órtese
      */
      else if (comando == 's') {
        if (debug) {
          Serial.println("Motores parados");
        }
        parar_motor();
      }
      /*
         Comando para envio da tensão da bateria
      */
      else if (comando == 'v') {
        String resposta = "{\"tensao\":";
        resposta = resposta + ("%.2f", volt_pwr) + "}";
        Serial.print(resposta);
      }
      /*
         Comando para envio da velocidade e corrente
      */
      else if (comando == 'r') {
        //Atribui os dados do último movimento para ser enviado logo após.
        registra_media();
        envia_medias();
      }
      /*
         Comando para abertura dos dedos
      */
      else if (comando == 'a') {
        if (!dedos_abertos) {
          abrir_dedos();
          FastLED.delay(50);
          if ( !(digitalRead(FIM_CURSO)) ) {
            dedos_abertos   = true;
            dedos_fechados  = false;
          }
          else {
            dedos_abertos   = false;
            dedos_fechados  = false;
          }
        }
      }
      /*
         Comando para fechamento dos dedos
      */
      else if (comando == 'f') {
        if (!dedos_fechados) {
          fechar_dedos();
          FastLED.delay(50);
          if ( !(digitalRead(FIM_CURSO)) ) {
            dedos_abertos   = false;
            dedos_fechados  = true;
          }
          else {
            dedos_abertos   = false;
            dedos_fechados  = false;
          }
        }
      }
      /*
         Comando para iniciar efeito do bloco Preparar
      */
      else if (comando == 'p') {
        //Efeito de fade no bloco preparar:
        fade_escolha(crgb_fundo, 0, 6, DURACAO_PREPARAR);
      }
    }

    usage = count / 65536 * 100;
    if (prescaler > 1) {
      if (usage < 0.15) {
        prescaler--;
        //FastLED.delay(200);
      }
    }
  }
}
